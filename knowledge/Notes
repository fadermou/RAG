    5  source .venv/bin/activate
    6  python install django
    7  python3 install django
    8  python3 -m pip install Django


HOW TO LIST VOLUME 

docker volume ls
sudo docker volume inspect rag_pgdata


ADD LOGOUT AND REMOVE LOGIN AND SIGN UP FROM THE PAGE


#### check models in DOCUMENTS later and VIEWS
#### show how database is structured
#### and how serilize works in views

ROMEVE : "########"

FOR DOCUMENTS.URLS AND PROJECT URLS:
BUT WHATS THIS
##################################
✅ What this does now

/api/documents/upload/ accepts PDF files.

Creates a Document row in Postgres.

Extracts text, splits it into chunks → creates DocumentChunk rows.

Each chunk is now ready to be embedded and stored in Qdrant.
###################################

QUESTIONS:
Why we used QDRANT in DocumentsChunck but not in Documents?
Why we use Qdrant while we have postgresql
How Qdrant and Postgresql are connected?
How we can use Postgresql without Qdrant?
How Qdrant stores data?(vectors)
What are embeddings?
How is embeddings connected to vectors and to Qdrant?
Why did we seperate code, services folder that got embeddings and Qdrant connection by itself?
Why are we saving using UUID not just ID
How jwt is exactly working
ADD makemigrations in the dockerfile of django
Do I refresh the token??
Postgresql does save vectors why then are we using Qdrant?
CHECK services and urls in backend
CHECK models in DOCUMENTS later and VIEWS


EXPLAIN THIS:
back_end/             <-- Django project folder
├── settings.py
├── urls.py
├── wsgi.py
├── asgi.py
├── services/         <-- new folder for service helpers
│   ├── __init__.py
│   ├── qdrant_service.py     <-- your Qdrant connection code
│   └── embedding_service.py  <-- embedding logic
├── manage.py




qdrant-client → to talk to Qdrant (insert/search vectors).

sentence-transformers → to create embeddings from text chunks.
